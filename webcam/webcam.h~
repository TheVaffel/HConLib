#include <errno.h>
#include <fcntl.h>
#include <linux/videodev2.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <unistd.h>
#define STBI_ONLY_JPEG
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

bool webcam_camActive = false;
bool webcam_quit = false;

int webcam_fd;

uint8_t* webcam_buffer;

static int webcam_xioctl(int request, void *arg)
{
        int r;
 
        do r = ioctl (webcam_fd, request, arg);
        while (-1 == r && EINTR == errno);
 
        return r;
}
 
int webcam_init_mmap(int width, int height)
{
    struct v4l2_format format;
    format.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    format.fmt.pix.pixelformat = V4L2_PIX_FMT_MJPEG;
    format.fmt.pix.width = width;
    format.fmt.pix.height = height;

    if(ioctl(webcam_fd, VIDIOC_S_FMT, &format) < 0){
        perror("VIDIOC_S_FMT");
        exit(1);
    }

    struct v4l2_requestbuffers req = {0};
    req.count = 1;
    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    req.memory = V4L2_MEMORY_MMAP;
 
    if (-1 == webcam_xioctl(VIDIOC_REQBUFS, &req))
    {
        perror("Requesting Buffer");
        return 1;
    }
 
    struct v4l2_buffer buf = {0};
    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    buf.memory = V4L2_MEMORY_MMAP;
    buf.index = 0;
    if(-1 == webcam_xioctl(VIDIOC_QUERYBUF, &buf))
    {
      perror("Querying Buffer");
      return 1;
    }
 
    webcam_buffer = static_cast<uint8_t*>(mmap (NULL, buf.length, PROT_READ | PROT_WRITE, MAP_SHARED, webcam_fd, buf.m.offset));
    //printf("Length: %d\nAddress: %p\n", buf.length, buffer);
    //printf("Image Length: %d\n", buf.bytesused);
 
    return 0;
}
 
int webcam_capture_image(unsigned char** rgb_buffer)
{
    struct v4l2_buffer buf = {0};
    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    buf.memory = V4L2_MEMORY_MMAP;
    buf.index = 0;
    if(-1 == webcam_xioctl(VIDIOC_QBUF, &buf))
    {
        perror("Query Buffer");
        return 1;
    }
 
    fd_set fds;
    if(!webcam_camActive){
      if(-1 == webcam_xioctl(VIDIOC_STREAMON, &buf.type))
      {
          perror("Start Capture");
          return 1;
      }
 
      FD_ZERO(&fds);
      FD_SET(webcam_fd, &fds);
      webcam_camActive = true;
    }

    struct timeval tv = {0};
    //tv.tv_sec = 2;
    int r = select(webcam_fd+1, &fds, NULL, NULL, &tv);
    
    if(-1 == r)
    {
        perror("Waiting for Frame");
        return 1;
    }

    if(-1 == webcam_xioctl(VIDIOC_DQBUF, &buf))
    {
        perror("Retrieving Frame");
        return 1;
    }
    
    int w, h, c;
    if(*rgb_buffer){
      stbi_image_free(*rgb_buffer);
    }
    
     *rgb_buffer = stbi_load_from_memory((unsigned char*)webcam_buffer, buf.length, &w, &h, &c, 4);
    return 0;
}

void webcam_init(int width, int height, int deviceNum){
  char buffer[100];
  const char* pattern = "/dev/video%d";
  sprintf(buffer, pattern, deviceNum);
 
  webcam_fd = open(buffer, O_RDWR);
  if (webcam_fd == -1)
    {
      perror("Opening video device");
    }
        
  webcam_init_mmap(width, height);
}

void webcam_close(){
  close(webcam_fd);
}
